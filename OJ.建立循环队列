typedef struct 
{
    int* a;
    int front;
    int rear;
    int k;
}MyCircularQueue;


//构造器，设置队列长度为 k 。
MyCircularQueue* myCircularQueueCreate(int k) 
{
    MyCircularQueue*q=(MyCircularQueue*)malloc(sizeof(MyCircularQueue));
    q->a=(int*)malloc(sizeof(int)*(k+1));//比需求空间多开一个节点
    q->front=0;
    q->rear=0;
    q->k=k;
    return q;
}

bool myCircularQueueIsEmpty(MyCircularQueue* obj); 
bool myCircularQueueIsFull(MyCircularQueue* obj); 

//向循环队列插入一个元素。如果成功插入则返回真。
bool myCircularQueueEnQueue(MyCircularQueue* obj, int value) 
{
    if(myCircularQueueIsFull(obj))
        return false;
    
    obj->a[obj->rear]=value;
    obj->rear++;
    obj->rear%=(obj->k+1);
    return true;
}
//从循环队列中删除一个元素。如果成功删除则返回真。
bool myCircularQueueDeQueue(MyCircularQueue* obj) 
{
    if(myCircularQueueIsEmpty(obj))
        return false;
    
    ++obj->front;
    obj->front%=(obj->k+1);
    return true;
}
//从队首获取元素。如果队列为空，返回 -1 
int myCircularQueueFront(MyCircularQueue* obj) 
{
    if(myCircularQueueIsEmpty(obj))
    return -1;
    else
    return obj->a[obj->front];
}
//获取队尾元素。如果队列为空，返回 -1 。
int myCircularQueueRear(MyCircularQueue* obj) 
{
    if(myCircularQueueIsEmpty(obj))
    {
        return -1;
    }
    else
    {
        int tail=obj->rear-1;
        if(tail==-1)
        {
            tail=obj->k;
        }
        return obj->a[tail];
    }
}
//检查循环队列是否为空
bool myCircularQueueIsEmpty(MyCircularQueue* obj) 
{
    return obj->front==obj->rear;    
}
//检查循环队列是否已满。
bool myCircularQueueIsFull(MyCircularQueue* obj)
{
    return (obj->rear+1)%(obj->k+1)==obj->front;
}

void myCircularQueueFree(MyCircularQueue* obj)
{
    free(obj->a);
    free(obj);
}

/**
 * Your MyCircularQueue struct will be instantiated and called as such:
 * MyCircularQueue* obj = myCircularQueueCreate(k);
 * bool param_1 = myCircularQueueEnQueue(obj, value);
 
 * bool param_2 = myCircularQueueDeQueue(obj);
 
 * int param_3 = myCircularQueueFront(obj);
 
 * int param_4 = myCircularQueueRear(obj);
 
 * bool param_5 = myCircularQueueIsEmpty(obj);
 
 * bool param_6 = myCircularQueueIsFull(obj);
 
 * myCircularQueueFree(obj);
*/
